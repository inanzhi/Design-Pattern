package iterator_pattern

// IAggregate 接口，定义创建迭代器的方法

//解耦合
//通过定义聚合接口，可以将聚合对象和迭代器对象解耦，使得它们之间的依赖关系松散。如果将来需要修改聚合对象的实现或者添加新的聚合类型，可以做到对现有代码最小的修改。
//聚合接口提供了一种一致的方法来创建迭代器，客户端代码不需要关心具体的聚合对象类型，只需要使用统一的接口来创建和使用迭代器。
//
//遵循开闭原则
//
//通过定义接口，可以方便地扩展新的聚合类型而不需要修改现有的代码。新添加的聚合类型只需要实现聚合接口，迭代器的使用方法保持不变
//便于单元测试
//定义接口有助于编写单元测试，通过接口可以很容易地替换真实对象为模拟对象，从而对代码进行测试。

// 聚合命名的由来
// 聚合对象：在软件设计中，聚合对象是一种包含其他对象的对象。它将这些对象组合在一起，并提供一种访问这些对象的方法。通常，聚合对象可以是数组、列表、树、图等数据结构。
// 抽象化和封装：通过定义一个聚合接口，可以将具体的集合类型（如数组、列表）抽象化，使得代码可以处理不同类型的集合，而不需要了解集合的内部实现细节。
// 创建迭代器：聚合接口的主要作用是提供一个方法来创建迭代器对象，使得客户端代码可以遍历集合中的元素。这种方式将迭代逻辑与集合的内部结构分离，增强了代码的灵活性和可维护性
// 一个集合或容器对象
type IAggregate interface {
	CreateIterator() IIterator
}
