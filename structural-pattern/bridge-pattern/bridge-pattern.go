package bridge_pattern

// 通过桥接模式可以将抽象部分和它的实现部分分离。

//抽象角色 - 抽象角色是一个接口。它的子类也被称为修正抽象角色。抽象角色包含一个对实现角色的引用。
//实现角色 - 实现角色也是一个接口。实现角色的子类被称为具化实现角色。
//这样分层的优势在于在调用抽象角色的时候不需要考虑实现层的内容。

// 桥接模式（Bridge Pattern）是一种结构型设计模式，旨在将抽象部分与其实现部分分离，使它们可以独立地变化。
//桥接模式通过引入一个桥接接口，来将抽象部分和实现部分分离，从而解耦二者，实现更好的灵活性和可扩展性。

//假设我们有两种维度的变化：形状和颜色。如果我们直接组合这两种变化，每增加一种形状或颜色，就需要增加对应的类，类的数量将会呈现指数级增长。
//通过桥接模式，我们可以将形状和颜色分开，使得形状和颜色可以独立变化。

//简单来讲，就是依赖接口而不是依赖
